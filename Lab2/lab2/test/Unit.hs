import           Lib
import           Test.HUnit

toNumbersTest :: Test
toNumbersTest =
  test
    [ "testNumbers" ~: "(toNumbers \"17 83 25 41 35 18 53 61 37 95 40 82 81 61 87 56 32 61 48 91 26 80\")" ~:
      [ 17.0
      , 83.0
      , 25.0
      , 41.0
      , 35.0
      , 18.0
      , 53.0
      , 61.0
      , 37.0
      , 95.0
      , 40.0
      , 82.0
      , 81.0
      , 61.0
      , 87.0
      , 56.0
      , 32.0
      , 61.0
      , 48.0
      , 91.0
      , 26.0
      , 80.0
      ] ~=?
      toNumbers "17 83 25 41 35 18 53 61 37 95 40 82 81 61 87 56 32 61 48 91 26 80"
    , "testEmpty" ~: "(toNumbers \"\")" ~: [] ~=? toNumbers ""
    ]

normalizeTest :: Test
normalizeTest =
  test
    [ "testNormal" ~: "(normalize 4 [44, 16, 38, 0, 95, 70, 60, 0, 65, 56])" ~:
      [ 0.4631578947368421
      , 0.16842105263157894
      , 0.4
      , 0.0
      , 1.0
      , 0.7368421052631579
      , 0.631578947368421
      , 0.0
      , 0.6842105263157895
      , 0.5894736842105263
      ] ~=?
      normalize 4 [44, 16, 38, 0, 95, 70, 60, 0, 65, 56]
    , "testEmpty" ~: "(normalize 0 [])" ~: [] ~=? normalize 0 []
    ]

multiplyTest :: Test
multiplyTest =
  test
    [ "testMult" ~: "(multiply 5 [8, 27, 66, 43, 92, 8, 79, 67, 0, 15])" ~:
      [40.0, 135.0, 330.0, 215.0, 460.0, 40.0, 395.0, 335.0, 0.0, 75.0] ~=?
      multiply 5 [8, 27, 66, 43, 92, 8, 79, 67, 0, 15]
    , "testEmpty" ~: "(multiply 0 [])" ~: [] ~=? multiply 0 []
    ]

getSolutionTest :: Test
getSolutionTest =
  test
    [ "testSol" ~: "(getSolution" ++
      "[ [41, 87, 4, 0, 34, 16, 8, 0, 45, 55]" ++
      ", [77, 12, 55, 96, 21, 46, 18, 99, 18, 0]" ++
      ", [8, 27, 66, 43, 92, 8, 79, 67, 0, 15]" ++
      ", [35, 47, 54, 47, 77, 73, 3, 47, 92, 41]" ++
      "])" ~: [24.366618544568382, 7.654927277930636, -4.345965894570071, -22.339350634461084] ~=?
      getSolution
        [ [41, 87, 4, 0, 34, 16, 8, 0, 45, 55]
        , [77, 12, 55, 96, 21, 46, 18, 99, 18, 0]
        , [8, 27, 66, 43, 92, 8, 79, 67, 0, 15]
        , [35, 47, 54, 47, 77, 73, 3, 47, 92, 41]
        ]
    , "testEmpty" ~: "(getSolution [])" ~: [] ~=? getSolution []
    ]

getSolutionRecTest :: Test
getSolutionRecTest =
  test
    [ "testSolRec" ~: "(getSolutionRec" ++
      "[ [42, 77, 9, 20, 9, 0, 40, 89, 53, 62]" ++
      ", [40, 74, 74, 96, 11, 39, 78, 47, 29, 0]" ++
      ", [28, 0, 31, 53, 0, 57, 2, 98, 20, 89]" ++
      ", [51, 44, 0, 71, 33, 83, 28, 33, 20, 77]" ++
      "]" ++
      "[])" ~: [62.0, -1798.0, 175053.0, -4843313.0] ~=?
      getSolutionRec
        [ [42, 77, 9, 20, 9, 0, 40, 89, 53, 62]
        , [40, 74, 74, 96, 11, 39, 78, 47, 29, 0]
        , [28, 0, 31, 53, 0, 57, 2, 98, 20, 89]
        , [51, 44, 0, 71, 33, 83, 28, 33, 20, 77]
        ]
        []
    , "testEmpty" ~: "(getSolutionRec [] [])" ~: [] ~=? getSolutionRec [] []
    ]

toTriangularTest :: Test
toTriangularTest =
  test
    [ "testTrian" ~: "(toTriangular" ++
      "[ [41, 87, 4, 0, 34, 16, 8, 0, 45, 55]" ++
      ", [77, 12, 55, 96, 21, 46, 18, 99, 18, 0]" ++
      ", [8, 27, 66, 43, 92, 8, 79, 67, 0, 15]" ++
      ", [35, 47, 54, 47, 77, 73, 3, 47, 92, 41]" ++
      "])" ~:
      [ [ 1.0
        , 2.1219512195121952
        , 0.0975609756097561
        , 0.0
        , 0.8292682926829268
        , 0.3902439024390244
        , 0.1951219512195122
        , 0.0
        , 1.0975609756097562
        , 1.3414634146341464
        ]
      , [ -0.0
        , 1.0
        , -0.31367810536491053
        , -0.6341227646205896
        , 0.2830675044304817
        , -0.10536491058482357
        , -0.019655227968422742
        , -0.653939101014983
        , 0.4393426776220396
        , 0.6822941839858224
        ]
      , [ 0.0
        , 0.0
        , 1.0
        , 0.7219696701898264
        , 1.2071900738803067
        , 0.08680405811446144
        , 1.135628689596663
        , 1.0759376436070558
        , -0.19285941532044254
        , -0.037611792569549996
        ]
      , [ -0.0
        , -0.0
        , -0.0
        , 1.0
        , -7.7744381201759385
        , -82.89337505131577
        , 81.76039158687405
        , 25.196895560807416
        , -115.61760365698115
        , -22.339350634461084
        ]
      ] ~=?
      toTriangular
        [ [41, 87, 4, 0, 34, 16, 8, 0, 45, 55]
        , [77, 12, 55, 96, 21, 46, 18, 99, 18, 0]
        , [8, 27, 66, 43, 92, 8, 79, 67, 0, 15]
        , [35, 47, 54, 47, 77, 73, 3, 47, 92, 41]
        ]
    , "testEmpty" ~: "(toTriangular [])" ~: [] ~=? toTriangular []
    ]

toTriangularRecTest :: Test
toTriangularRecTest =
  test
    [ "testTrianRec" ~: "(toTriangularRec" ++
      "[ [42, 77, 9, 20, 9, 0, 40, 89, 53, 62]" ++
      ", [40, 74, 74, 96, 11, 39, 78, 47, 29, 0]" ++
      ", [28, 0, 31, 53, 0, 57, 2, 98, 20, 89]" ++
      ", [51, 44, 0, 71, 33, 83, 28, 33, 20, 77]" ++
      "]" ++
      "0)" ~:
      [ [ 1.0
        , 1.8333333333333333
        , 0.21428571428571427
        , 0.47619047619047616
        , 0.21428571428571427
        , 0.0
        , 0.9523809523809523
        , 2.119047619047619
        , 1.2619047619047619
        , 1.4761904761904763
        ]
      , [ 0.0
        , 1.0
        , 98.14285714285644
        , 115.4285714285706
        , 3.6428571428571175
        , 58.49999999999959
        , 59.857142857142435
        , -56.642857142856734
        , -32.21428571428548
        , -88.57142857142794
        ]
      , [ 0.0
        , 0.0
        , 1.0
        , 1.1781552439265257
        , 0.03574955559944697
        , 0.6043847521232472
        , 0.6020146158404108
        , -0.5666600829547699
        , -0.3296464546711435
        , -0.8886035947066956
        ]
      , [ 0.0
        , 0.0
        , 0.0
        , 1.0
        , 0.5852151768195412
        , 0.9893242607772755
        , 0.488649378098239
        , -2.657935451775714
        , -0.8266856184046858
        , -1.5154833033543018
        ]
      ] ~=?
      toTriangularRec
        [ [42, 77, 9, 20, 9, 0, 40, 89, 53, 62]
        , [40, 74, 74, 96, 11, 39, 78, 47, 29, 0]
        , [28, 0, 31, 53, 0, 57, 2, 98, 20, 89]
        , [51, 44, 0, 71, 33, 83, 28, 33, 20, 77]
        ]
        0
    , "testEmpty" ~: "(toTriangularRec [] 0)" ~: [] ~=? toTriangularRec [] 0
    ]

processSingleRowTest :: Test
processSingleRowTest =
  test
    [ "testRow" ~: "(processSingleRow [70, 10, 16, 76, 65, 88, 98, 3] 3 [12, 59, 98, 31, 35, 26, 63, 41])" ~:
      [ -16.552631578947366
      , 54.921052631578945
      , 91.47368421052632
      , 0.0
      , 8.486842105263158
      , -9.894736842105267
      , 23.026315789473685
      , 39.776315789473685
      ] ~=?
      processSingleRow [70, 10, 16, 76, 65, 88, 98, 3] 3 [12, 59, 98, 31, 35, 26, 63, 41]
    , "testEmpty" ~: "(processSingleRow [] 0 [])" ~: [] ~=? processSingleRow [] 0 []
    ]

main :: IO Counts
main = do
  runTestTT toNumbersTest
  runTestTT normalizeTest
  runTestTT multiplyTest
  runTestTT getSolutionTest
  runTestTT getSolutionRecTest
  runTestTT toTriangularTest
  runTestTT toTriangularRecTest
  runTestTT processSingleRowTest
